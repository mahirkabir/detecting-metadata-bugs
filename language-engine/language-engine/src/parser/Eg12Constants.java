package parser;

/* Generated By:JJTree&JavaCC: Do not edit this line. Eg12Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Eg12Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int RULE = 9;
  /** RegularExpression Id. */
  int FUNCTION = 10;
  /** RegularExpression Id. */
  int IN = 11;
  /** RegularExpression Id. */
  int FOR = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int ASSERT = 15;
  /** RegularExpression Id. */
  int MSG = 16;
  /** RegularExpression Id. */
  int EXISTS = 17;
  /** RegularExpression Id. */
  int NOT = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 21;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 22;
  /** RegularExpression Id. */
  int HEX_LITERAL = 23;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 24;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 25;
  /** RegularExpression Id. */
  int EXPONENT = 26;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 27;
  /** RegularExpression Id. */
  int STRING_LITERAL = 28;
  /** RegularExpression Id. */
  int TYPES = 29;
  /** RegularExpression Id. */
  int FILE = 30;
  /** RegularExpression Id. */
  int CLASS = 31;
  /** RegularExpression Id. */
  int METHOD = 32;
  /** RegularExpression Id. */
  int FIELD = 33;
  /** RegularExpression Id. */
  int STRING = 34;
  /** RegularExpression Id. */
  int BOOL = 35;
  /** RegularExpression Id. */
  int IDENTIFIER = 36;
  /** RegularExpression Id. */
  int LETTER = 37;
  /** RegularExpression Id. */
  int DIGIT = 38;
  /** RegularExpression Id. */
  int COLON = 39;
  /** RegularExpression Id. */
  int DASH = 40;
  /** RegularExpression Id. */
  int STAR = 41;
  /** RegularExpression Id. */
  int LPAREN = 42;
  /** RegularExpression Id. */
  int RPAREN = 43;
  /** RegularExpression Id. */
  int LBRACE = 44;
  /** RegularExpression Id. */
  int RBRACE = 45;
  /** RegularExpression Id. */
  int LBRACKET = 46;
  /** RegularExpression Id. */
  int RBRACKET = 47;
  /** RegularExpression Id. */
  int SEMICOLON = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int ASSIGN = 51;
  /** RegularExpression Id. */
  int GT = 52;
  /** RegularExpression Id. */
  int LT = 53;
  /** RegularExpression Id. */
  int BANG = 54;
  /** RegularExpression Id. */
  int TILDE = 55;
  /** RegularExpression Id. */
  int HOOK = 56;
  /** RegularExpression Id. */
  int EQ = 57;
  /** RegularExpression Id. */
  int LE = 58;
  /** RegularExpression Id. */
  int GE = 59;
  /** RegularExpression Id. */
  int NE = 60;
  /** RegularExpression Id. */
  int SC_OR = 61;
  /** RegularExpression Id. */
  int SC_AND = 62;
  /** RegularExpression Id. */
  int INCR = 63;
  /** RegularExpression Id. */
  int DECR = 64;
  /** RegularExpression Id. */
  int PLUS = 65;
  /** RegularExpression Id. */
  int SLASH = 66;
  /** RegularExpression Id. */
  int BIT_AND = 67;
  /** RegularExpression Id. */
  int BIT_OR = 68;
  /** RegularExpression Id. */
  int XOR = 69;
  /** RegularExpression Id. */
  int REM = 70;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"Rule\"",
    "\"function\"",
    "\"in\"",
    "\"for\"",
    "\"if\"",
    "\"else\"",
    "\"assert\"",
    "\"msg\"",
    "\"exists\"",
    "\"NOT\"",
    "\"AND\"",
    "\"OR\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<TYPES>",
    "\"file\"",
    "\"class\"",
    "\"method\"",
    "\"field\"",
    "\"String\"",
    "\"bool\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\":\"",
    "\"-\"",
    "\"*\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
  };

}
