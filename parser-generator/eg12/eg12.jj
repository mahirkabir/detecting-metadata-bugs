/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. eg12.jj */
/*@egen*/options {
              
                
                          
   STATIC = false;
 }

PARSER_BEGIN(Eg12)

/** An Arithmetic Grammar. */
public class Eg12/*@bgen(jjtree)*/implements Eg12TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTEg12State jjtree = new JJTEg12State();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) {
    Eg12 t;
    System.out.println("Reading from standard input...");
    try {
      t = new Eg12(new java.io.FileInputStream(args[0]));
    } catch (java.io.FileNotFoundException e) {
      System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
      return;
    }
    try {
      ASTStart n = t.Start();
      Eg12Visitor v = new Eg12DumpVisitor();
      n.jjtAccept(v, null);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Eg12)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

 TOKEN :
 {
   <RULE: "Rule">
 | <FUNCTION: "function">

 | <IN: "in">

 | <FOR: "for" >
 | <IF: "if" >
 | <ELSE: "else" >
 | <ASSERT: "assert" >
 | <MSG: "msg" >
 | <EXISTS: "exists">

/*
 | <GETFQN: "getFQN">
 | <GETATTR: "getAttr">
 | <GETNAME: "getName">
 | <SUBSTRING: "substring">
 | <UPPERCASE: "upperCase">
 | <GETARG: "getArg">
 | <CALLEXISTS: "callExists">
 | <GETANNOTATED: "getAnnotated">
 | <JOIN: "join">
 | <GETSN: "getSN">
 | <GETANNOATTR: "getAnnoAttr">
 | <ISEMPTY: "isEmpty">
 | <PATHEXISTS: "pathExists">

 | <INDEXOF: "indexOf">
 | <ENDSWITH: "endsWith">
*/

 | <NOT: "NOT">
 | <AND: "AND">
 | <OR: "OR">
 }

 TOKEN : /* LITERALS */
 {
   <INTEGER_LITERAL:
         <DECIMAL_LITERAL> (["l","L"])?
       | <HEX_LITERAL> (["l","L"])?
       | <OCTAL_LITERAL> (["l","L"])?
   >
 |
   <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
 |
   <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
 |
   <#OCTAL_LITERAL: "0" (["0"-"7"])* >
 |
   <FLOATING_POINT_LITERAL:
         (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
       | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
       | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
       | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
   >
 |
   <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
 |
   <CHARACTER_LITERAL:
       "'"
       (   (~["'","\\","\n","\r"])
         | ("\\"
             ( ["n","t","b","r","f","\\","'","\""]
             | ["0"-"7"] ( ["0"-"7"] )?
             | ["0"-"3"] ["0"-"7"] ["0"-"7"]
             )
           )
       )
       "'"
   >
 |
   <STRING_LITERAL:
       "\""
       (   (~["\"","\\","\n","\r"])
         | ("\\"
             ( ["n","t","b","r","f","\\","'","\""]
             | ["0"-"7"] ( ["0"-"7"] )?
             | ["0"-"3"] ["0"-"7"] ["0"-"7"]
             )
           )
       )*
       "\""
   >
 }

 TOKEN: /* TYPES */
 {
	<TYPES: <FILE>
		| "<" <IDENTIFIER> ">"
		| <CLASS>
		| <METHOD>
		| <FIELD>
		| <STRING>
		| <BOOL> >
	| <FILE: "file" >
	| <CLASS: "class" >
	| <METHOD: "method" >
	| <FIELD: "field" >
	| <STRING: "String">
	| <BOOL: "bool" >
 }

 TOKEN : /* IDENTIFIERS */
 {
   <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<COLON>|<DASH>|<STAR>)* >
 |
   <#LETTER:
       [
        "$",
        "A"-"Z",
        "_",
        "a"-"z",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
       ]
   >
 |
   <#DIGIT:
       [
        "0"-"9",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
       ]
   >
  | <#COLON: ":" >
  | <#DASH: "-" >
  | <#STAR: "*" >
 }



 /* SEPARATORS */

 TOKEN :
 {
   <LPAREN: "(" >
 | <RPAREN: ")" >
 | <LBRACE: "{" >
 | <RBRACE: "}" >
 | <LBRACKET: "[" >
 | <RBRACKET: "]" >
 | <SEMICOLON: ";" >
 | <COMMA: "," >
 | <DOT: "." >


 }

 /* OPERATORS */

 TOKEN :
 {
   <ASSIGN: "=" >
 | <GT: ">" >
 | <LT: "<" >
 | <BANG: "!" >
 | <TILDE: "~" >
 | <HOOK: "?" >

 | <EQ: "==" >
 | <LE: "<=" >
 | <GE: ">=" >
 | <NE: "!=" >
 | <SC_OR: "||" >
 | <SC_AND: "&&" >
 | <INCR: "++" >
 | <DECR: "--" >
 | <PLUS: "+" >


 | <SLASH: "/" >
 | <BIT_AND: "&" >
 | <BIT_OR: "|" >
 | <XOR: "^" >
 | <REM: "%" >
 }

/** Main production. */
ASTStart Start()       : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	<RULE> Identifier() Block()
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Block(): {}
{
	"{" Stmnt() (StmntSuffix())? "}"
}

void Stmnt(): {}
{
	ForStmnt()
	| IfStmnt()
	| AssertStmnt()
	| DeclStmnt() ";"
}

void StmntSuffix(): {}
{
	Stmnt() (StmntSuffix())?
}
void ForStmnt()          : {/*@bgen(jjtree) ForStmnt */
  ASTForStmnt jjtn000 = new ASTForStmnt(JJTFORSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStmnt */
        try {
/*@egen*/
	<FOR> "(" Expression() <IN> Expression() ")" Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfStmnt()         : {/*@bgen(jjtree) IfStmnt */
  ASTIfStmnt jjtn000 = new ASTIfStmnt(JJTIFSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStmnt */
        try {
/*@egen*/
	<IF> "(" Expression() ")" Block() (ElseStmnt())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ElseStmnt()           : {/*@bgen(jjtree) ElseStmnt */
  ASTElseStmnt jjtn000 = new ASTElseStmnt(JJTELSESTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElseStmnt */
  try {
/*@egen*/
  <ELSE> Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssertStmnt()             : {/*@bgen(jjtree) AssertStmnt */
  ASTAssertStmnt jjtn000 = new ASTAssertStmnt(JJTASSERTSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssertStmnt */
        try {
/*@egen*/
	<ASSERT> "(" Expression() ")" "{" MsgStmnt() ";" "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DeclStmnt()           : {/*@bgen(jjtree) DeclStmnt */
  ASTDeclStmnt jjtn000 = new ASTDeclStmnt(JJTDECLSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclStmnt */
        try {
/*@egen*/
	Type() Identifier() "=" (FunctionOrId() | Literal())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression()            : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	ConditionalOrExp()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ConditionalOrExp()                      : {/*@bgen(jjtree) #ConditionalOrExp(> 1) */
  ASTConditionalOrExp jjtn000 = new ASTConditionalOrExp(JJTCONDITIONALOREXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalOrExp(> 1) */
        try {
/*@egen*/
	ConditionalAndExp() (LOOKAHEAD(2) <OR> ConditionalAndExp())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void ConditionalAndExp()                       : {/*@bgen(jjtree) #ConditionalAndExp(> 1) */
  ASTConditionalAndExp jjtn000 = new ASTConditionalAndExp(JJTCONDITIONALANDEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalAndExp(> 1) */
        try {
/*@egen*/
	ConditionalEqExp() (LOOKAHEAD(2) <AND> ConditionalEqExp())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void ConditionalEqExp()                      : {/*@bgen(jjtree) #ConditionalEqExp(> 1) */
  ASTConditionalEqExp jjtn000 = new ASTConditionalEqExp(JJTCONDITIONALEQEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalEqExp(> 1) */
        try {
/*@egen*/
	SimExp() (LOOKAHEAD(2) <EQ> SimExp())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void MsgStmnt()          : {/*@bgen(jjtree) MsgStmnt */
  ASTMsgStmnt jjtn000 = new ASTMsgStmnt(JJTMSGSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MsgStmnt */
        try {
/*@egen*/
	<MSG> "(" StringLiteral() (MsgSuffix())? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MsgSuffix()           : {/*@bgen(jjtree) MsgSuffix */
  ASTMsgSuffix jjtn000 = new ASTMsgSuffix(JJTMSGSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MsgSuffix */
        try {
/*@egen*/
	"," SimExp() ("," SimExp())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionOrId()              : {/*@bgen(jjtree) FunctionOrId */
  ASTFunctionOrId jjtn000 = new ASTFunctionOrId(JJTFUNCTIONORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionOrId */
        try {
/*@egen*/
	Identifier() (FunctionTail())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FunctionTail()              : {/*@bgen(jjtree) FunctionTail */
  ASTFunctionTail jjtn000 = new ASTFunctionTail(JJTFUNCTIONTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionTail */
        try {
/*@egen*/
	"(" (Params())? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SimExp()        : {/*@bgen(jjtree) SimExp */
  ASTSimExp jjtn000 = new ASTSimExp(JJTSIMEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimExp */
        try {
/*@egen*/
	FunctionOrId()
	| Literal()
	| Type() Identifier()
	| "(" Expression() ")"
	|/*@bgen(jjtree) Exists */
          {
            ASTExists jjtn001 = new ASTExists(JJTEXISTS);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ <EXISTS>/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/         "(" Expression() <IN> Expression() ")" "(" Expression() ")"
	|/*@bgen(jjtree) Not */
          {
            ASTNot jjtn002 = new ASTNot(JJTNOT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <NOT>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/      SimExp()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Params()        : {/*@bgen(jjtree) Params */
  ASTParams jjtn000 = new ASTParams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Params */
        try {
/*@egen*/
	SimExp() ("," SimExp())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Literal(): {}
{
	StringLiteral() | CharLiteral() | IntLiteral() | FloatLiteral()
}

void StringLiteral()          :
{/*@bgen(jjtree) Literal */
        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	t = <STRING_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		jjtn000.setLitType("String");
		jjtn000.setLitValue(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CharLiteral()          :
{/*@bgen(jjtree) Literal */
        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	t = <CHARACTER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		jjtn000.setLitValue(t.image);
		jjtn000.setLitType("Character");
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IntLiteral()          :
{/*@bgen(jjtree) Literal */
        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		jjtn000.setLitValue(t.image);
		jjtn000.setLitType("Integer");
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FloatLiteral()          :
{/*@bgen(jjtree) Literal */
        ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Literal */
        try {
/*@egen*/
	t = <FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		jjtn000.setLitValue(t.image);
		jjtn000.setLitType("Float");
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Identifier()             :
{/*@bgen(jjtree) Identifier */
        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setIdentifier(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Type()       :
{/*@bgen(jjtree) Type */
        ASTType jjtn000 = new ASTType(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	/*t = <FILE>
	| t = "<" Identifier() ">"
	| t = <CLASS>
	| t = <METHOD>
	| t = <FIELD>
	| t = <STRING>
	| t = <BOOL>
	*/
	t = <TYPES>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setType(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Types(): {}
{/*@bgen(jjtree) File */
        {
          ASTFile jjtn001 = new ASTFile(JJTFILE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	<FILE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
	| "<" Identifier() ">"
	|/*@bgen(jjtree) Class */
          {
            ASTClass jjtn002 = new ASTClass(JJTCLASS);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ <CLASS>/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/       
	|/*@bgen(jjtree) Method */
          {
            ASTMethod jjtn003 = new ASTMethod(JJTMETHOD);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ <METHOD>/*@bgen(jjtree)*/
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
            }
          }
/*@egen*/        
	|/*@bgen(jjtree) Field */
          {
            ASTField jjtn004 = new ASTField(JJTFIELD);
            boolean jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
          }
          try {
/*@egen*/ <FIELD>/*@bgen(jjtree)*/
          } finally {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004, true);
            }
          }
/*@egen*/       
	|/*@bgen(jjtree) String */
          {
            ASTString jjtn005 = new ASTString(JJTSTRING);
            boolean jjtc005 = true;
            jjtree.openNodeScope(jjtn005);
          }
          try {
/*@egen*/ <STRING>/*@bgen(jjtree)*/
          } finally {
            if (jjtc005) {
              jjtree.closeNodeScope(jjtn005, true);
            }
          }
/*@egen*/        
	|/*@bgen(jjtree) Bool */
          {
            ASTBool jjtn006 = new ASTBool(JJTBOOL);
            boolean jjtc006 = true;
            jjtree.openNodeScope(jjtn006);
          }
          try {
/*@egen*/ <BOOL>/*@bgen(jjtree)*/
          } finally {
            if (jjtc006) {
              jjtree.closeNodeScope(jjtn006, true);
            }
          }
/*@egen*/      
}