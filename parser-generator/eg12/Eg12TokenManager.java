/* Eg12TokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Eg12TokenManager.java */

/** Token Manager. */
public class Eg12TokenManager implements Eg12Constants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000000L) != 0L)
            return 4;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 46;
         }
         if ((active0 & 0x420000000000000L) != 0L)
            return 28;
         if ((active1 & 0x4L) != 0L)
            return 81;
         if ((active0 & 0x100010000L) != 0L)
         {
            jjmatchedKind = 36;
            return 40;
         }
         if ((active0 & 0x1eea00L) != 0L)
         {
            jjmatchedKind = 36;
            return 53;
         }
         if ((active0 & 0x240001400L) != 0L)
         {
            jjmatchedKind = 36;
            return 57;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 34;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 36;
            return 50;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 39;
         }
         if ((active0 & 0x240000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 56;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 49;
         }
         if ((active0 & 0x102800L) != 0L)
            return 53;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 45;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 33;
         }
         if ((active0 & 0xfd600L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
            return 53;
         }
         return -1;
      case 2:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 32;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 44;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 55;
         }
         if ((active0 & 0xd1000L) != 0L)
            return 53;
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 38;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 48;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 58;
         }
         if ((active0 & 0x2c600L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 53;
         }
         return -1;
      case 3:
         if ((active0 & 0x4200L) != 0L)
            return 53;
         if ((active0 & 0x28400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 53;
         }
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
            return 53;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 37;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 99;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 43;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 31;
         }
         return -1;
      case 4:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 99;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 42;
         }
         if ((active0 & 0x28400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 53;
         }
         if ((active0 & 0x280000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
            return 53;
         }
         return -1;
      case 5:
         if ((active0 & 0x500000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 5;
            return 53;
         }
         if ((active0 & 0x28000L) != 0L)
            return 53;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
            return 53;
         }
         return -1;
      case 6:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
            return 53;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 70);
      case 38:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 43:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 49);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 46:
         return jjStartNfaWithStates_0(0, 50, 4);
      case 47:
         return jjStartNfaWithStates_0(0, 66, 81);
      case 59:
         return jjStopAtPos(0, 48);
      case 60:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 56);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 46);
      case 93:
         return jjStopAtPos(0, 47);
      case 94:
         return jjStopAtPos(0, 69);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x24000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x240001400L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2800L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100010000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 44);
      case 124:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 45);
      case 126:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 43:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 45:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 61:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 82:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 53);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80004000L, active1, 0L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 53);
         break;
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800001000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x600L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 124:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 53);
         break;
      case 84:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 53);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000200L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 53);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 53);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 53);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 53);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x20400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 53);
         break;
      case 103:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 53);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 53);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 99;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 81:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(94, 95); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(0, 2); }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 48:
               case 53:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 46:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 50:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 39:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 45:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 43:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 37:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 34:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 32:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 58:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  else if (curChar == 47)
                     { jjAddStates(10, 12); }
                  else if (curChar == 36)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 34)
                     { jjCheckNAddStates(13, 15); }
                  else if (curChar == 39)
                     { jjAddStates(16, 17); }
                  else if (curChar == 46)
                     { jjCheckNAdd(4); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(18, 20); }
                  }
                  break;
               case 56:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 49:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 44:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 38:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 42:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 99:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 40:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 57:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 33:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 31:
                  if ((0x7ff241000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if (curChar == 46)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddStates(21, 23); }
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 39)
                     { jjAddStates(16, 17); }
                  break;
               case 10:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if (curChar == 39 && kind > 27)
                     kind = 27;
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 11); }
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 16:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if (curChar == 34)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 19:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 22:
                  if (curChar == 34 && kind > 28)
                     kind = 28;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 25:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 27:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 29:
                  if ((0x7ff241000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 30:
                  if (curChar == 62 && kind > 29)
                     kind = 29;
                  break;
               case 52:
                  if (curChar != 36)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 9); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 63:
                  if (curChar != 46)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 66:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(67); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(67, 8); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(71); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(71, 8); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(75); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(75, 8); }
                  break;
               case 76:
                  if (curChar != 48)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(78, 2); }
                  break;
               case 79:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(79, 2); }
                  break;
               case 80:
                  if (curChar == 47)
                     { jjAddStates(10, 12); }
                  break;
               case 82:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 83:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 84:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 85:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 87:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 88:
                  if (curChar == 42)
                     { jjCheckNAddStates(34, 36); }
                  break;
               case 89:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(90, 88); }
                  break;
               case 90:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(90, 88); }
                  break;
               case 91:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 92:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 93:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 94:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 95:
                  if (curChar == 42)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 96:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(97, 95); }
                  break;
               case 97:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(97, 95); }
                  break;
               case 98:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 108)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     { jjCheckNAdd(36); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 108)
                     { jjCheckNAdd(36); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 102)
                     { jjAddStates(40, 41); }
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 103)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 100)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAdd(53); }
                  }
                  if (curChar == 115)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 8:
                  if ((0x5000000050L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar == 92)
                     { jjAddStates(44, 46); }
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(11); }
                  break;
               case 19:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 20:
                  if (curChar == 92)
                     { jjAddStates(47, 49); }
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 28:
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 35:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 100 && kind > 29)
                     kind = 29;
                  break;
               case 41:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 47:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 51:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 54:
                  if (curChar == 102)
                     { jjAddStates(40, 41); }
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(52, 53); }
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(54, 55); }
                  break;
               case 77:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(78); }
                  break;
               case 78:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(78, 2); }
                  break;
               case 82:
                  { jjAddStates(0, 2); }
                  break;
               case 87:
                  { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 89:
               case 90:
                  { jjCheckNAddTwoStates(90, 88); }
                  break;
               case 94:
                  { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 96:
               case 97:
                  { jjCheckNAddTwoStates(97, 95); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 46:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 50:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 45:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 58:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 56:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 55:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 49:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 44:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 38:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 42:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 99:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 40:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 57:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 33:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(53); }
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(13, 15); }
                  break;
               case 28:
               case 29:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 82:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 87:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 89:
               case 90:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(90, 88); }
                  break;
               case 94:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 96:
               case 97:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(97, 95); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 99 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\122\165\154\145", 
"\146\165\156\143\164\151\157\156", "\151\156", "\146\157\162", "\151\146", "\145\154\163\145", 
"\141\163\163\145\162\164", "\155\163\147", "\145\170\151\163\164\163", "\116\117\124", "\101\116\104", 
"\117\122", null, null, null, null, null, null, null, null, null, "\146\151\154\145", 
"\143\154\141\163\163", "\155\145\164\150\157\144", "\146\151\145\154\144", 
"\123\164\162\151\156\147", "\142\157\157\154", null, null, null, null, null, null, "\50", "\51", "\173", 
"\175", "\133", "\135", "\73", "\54", "\56", "\75", "\76", "\74", "\41", "\176", 
"\77", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", 
"\55\55", "\53", "\57", "\46", "\174", "\136", "\45", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   82, 83, 85, 62, 63, 68, 69, 72, 73, 8, 81, 92, 93, 19, 20, 22, 
   10, 12, 77, 79, 2, 4, 5, 8, 19, 20, 24, 22, 64, 65, 8, 72, 
   73, 8, 88, 89, 91, 95, 96, 98, 57, 60, 6, 7, 13, 14, 16, 21, 
   23, 25, 66, 67, 70, 71, 74, 75, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Eg12TokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Eg12TokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 99; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffc1ffa3ffe01L, 0x7fL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1c0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[99];
    private final int[] jjstateSet = new int[2 * 99];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
