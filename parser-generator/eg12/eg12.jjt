options {
   MULTI=true;
   VISITOR=true;
   NODE_DEFAULT_VOID=true;
   STATIC = false;
 }

PARSER_BEGIN(Eg12)

/** An Arithmetic Grammar. */
public class Eg12 {

  /** Main entry point. */
  public static void main(String args[]) {
    Eg12 t;
    System.out.println("Reading from standard input...");
    try {
      t = new Eg12(new java.io.FileInputStream(args[0]));
    } catch (java.io.FileNotFoundException e) {
      System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
      return;
    }
    try {
      ASTStart n = t.Start();
      Eg12Visitor v = new Eg12DumpVisitor();
      n.jjtAccept(v, null);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Eg12)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

 TOKEN :
 {
   <RULE: "Rule">
 | <FUNCTION: "function">

 | <IN: "in">

 | <FOR: "for" >
 | <IF: "if" >
 | <ELSE: "else" >
 | <ASSERT: "assert" >
 | <MSG: "msg" >
 | <EXISTS: "exists">

/*
 | <GETFQN: "getFQN">
 | <GETATTR: "getAttr">
 | <GETNAME: "getName">
 | <SUBSTRING: "substring">
 | <UPPERCASE: "upperCase">
 | <GETARG: "getArg">
 | <CALLEXISTS: "callExists">
 | <GETANNOTATED: "getAnnotated">
 | <JOIN: "join">
 | <GETSN: "getSN">
 | <GETANNOATTR: "getAnnoAttr">
 | <ISEMPTY: "isEmpty">
 | <PATHEXISTS: "pathExists">

 | <INDEXOF: "indexOf">
 | <ENDSWITH: "endsWith">
*/

 | <NOT: "NOT">
 | <AND: "AND">
 | <OR: "OR">
 }

 TOKEN : /* LITERALS */
 {
   <INTEGER_LITERAL:
         <DECIMAL_LITERAL> (["l","L"])?
       | <HEX_LITERAL> (["l","L"])?
       | <OCTAL_LITERAL> (["l","L"])?
   >
 |
   <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
 |
   <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
 |
   <#OCTAL_LITERAL: "0" (["0"-"7"])* >
 |
   <FLOATING_POINT_LITERAL:
         (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
       | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
       | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
       | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
   >
 |
   <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
 |
   <CHARACTER_LITERAL:
       "'"
       (   (~["'","\\","\n","\r"])
         | ("\\"
             ( ["n","t","b","r","f","\\","'","\""]
             | ["0"-"7"] ( ["0"-"7"] )?
             | ["0"-"3"] ["0"-"7"] ["0"-"7"]
             )
           )
       )
       "'"
   >
 |
   <STRING_LITERAL:
       "\""
       (   (~["\"","\\","\n","\r"])
         | ("\\"
             ( ["n","t","b","r","f","\\","'","\""]
             | ["0"-"7"] ( ["0"-"7"] )?
             | ["0"-"3"] ["0"-"7"] ["0"-"7"]
             )
           )
       )*
       "\""
   >
 }

 TOKEN: /* TYPES */
 {
	<TYPES: <FILE>
		| "<" <IDENTIFIER> ">"
		| <CLASS>
		| <METHOD>
		| <CONSTRUCTOR>
		| <FIELD>
		| <STRING>
		| <BOOL> >
	| <FILE: "file" >
	| <CLASS: "class" >
	| <METHOD: "method" >
	| <CONSTRUCTOR: "constructor" >
	| <FIELD: "field" >
	| <STRING: "String">
	| <BOOL: "bool" >
 }

 TOKEN : /* IDENTIFIERS */
 {
   <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<COLON>|<DASH>|<STAR>)* >
 |
   <#LETTER:
       [
        "\u0024",
        "\u0041"-"\u005a",
        "\u005f",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff",
        "\u3040"-"\u318f",
        "\u3300"-"\u337f",
        "\u3400"-"\u3d2d",
        "\u4e00"-"\u9fff",
        "\uf900"-"\ufaff"
       ]
   >
 |
   <#DIGIT:
       [
        "\u0030"-"\u0039",
        "\u0660"-"\u0669",
        "\u06f0"-"\u06f9",
        "\u0966"-"\u096f",
        "\u09e6"-"\u09ef",
        "\u0a66"-"\u0a6f",
        "\u0ae6"-"\u0aef",
        "\u0b66"-"\u0b6f",
        "\u0be7"-"\u0bef",
        "\u0c66"-"\u0c6f",
        "\u0ce6"-"\u0cef",
        "\u0d66"-"\u0d6f",
        "\u0e50"-"\u0e59",
        "\u0ed0"-"\u0ed9",
        "\u1040"-"\u1049"
       ]
   >
  | <#COLON: ":" >
  | <#DASH: "-" >
  | <#STAR: "*" >
 }



 /* SEPARATORS */

 TOKEN :
 {
   <LPAREN: "(" >
 | <RPAREN: ")" >
 | <LBRACE: "{" >
 | <RBRACE: "}" >
 | <LBRACKET: "[" >
 | <RBRACKET: "]" >
 | <SEMICOLON: ";" >
 | <COMMA: "," >
 | <DOT: "." >


 }

 /* OPERATORS */

 TOKEN :
 {
   <ASSIGN: "=" >
 | <GT: ">" >
 | <LT: "<" >
 | <BANG: "!" >
 | <TILDE: "~" >
 | <HOOK: "?" >

 | <EQ: "==" >
 | <LE: "<=" >
 | <GE: ">=" >
 | <NE: "!=" >
 | <SC_OR: "||" >
 | <SC_AND: "&&" >
 | <INCR: "++" >
 | <DECR: "--" >
 | <PLUS: "+" >


 | <SLASH: "/" >
 | <BIT_AND: "&" >
 | <BIT_OR: "|" >
 | <XOR: "^" >
 | <REM: "%" >
 }

/** Main production. */
ASTStart Start() #Start: {}
{
	<RULE> Identifier() Block()
	<EOF>

	{ return jjtThis; }
}

void Block(): {}
{
	"{" Stmnt() (StmntSuffix())? "}"
}

void Stmnt(): {}
{
	ForStmnt()
	| IfStmnt()
	| AssertStmnt()
	| DeclStmnt() ";"
}

void StmntSuffix(): {}
{
	Stmnt() (StmntSuffix())?
}
void ForStmnt() #ForStmnt: {}
{
	<FOR> "(" Expression() <IN> Expression() ")" Block()
}

void IfStmnt() #IfStmnt: {}
{
	<IF> "(" Expression() ")" Block() (ElseStmnt())?
}

void ElseStmnt() #ElseStmnt: {}
{
  <ELSE> Block()
}

void AssertStmnt() #AssertStmnt: {}
{
	<ASSERT> "(" Expression() ")" "{" MsgStmnt() ";" "}"
}

void DeclStmnt() #DeclStmnt: {}
{
	Type() Identifier() "=" (FunctionOrId() | Literal())
}

void Expression() #Expression: {}
{
	ConditionalOrExp()
}

void ConditionalOrExp() #ConditionalOrExp(>1): {}
{
	ConditionalAndExp() (LOOKAHEAD(2) <OR> ConditionalAndExp())*
}

void ConditionalAndExp() #ConditionalAndExp(>1): {}
{
	ConditionalEqExp() (LOOKAHEAD(2) <AND> ConditionalEqExp())*
}

void ConditionalEqExp() #ConditionalEqExp(>1): {}
{
	SimExp() (LOOKAHEAD(2) <EQ> SimExp())*
}

void MsgStmnt() #MsgStmnt: {}
{
	<MSG> "(" StringLiteral() (MsgSuffix())? ")"
}

void MsgSuffix() #MsgSuffix: {}
{
	"," SimExp() ("," SimExp())*
}

void FunctionOrId() #FunctionOrId: {}
{
	Identifier() (FunctionTail())?
}

void FunctionTail() #FunctionTail: {}
{
	"(" (Params())? ")"
}

void SimExp() #SimExp: {}
{
	FunctionOrId()
	| Literal()
	| Type() Identifier()
	| "(" Expression() ")"
	| <EXISTS> #Exists "(" Expression() <IN> Expression() ")" "(" Expression() ")"
	| <NOT> #Not SimExp()
}

void Params() #Params: {}
{
	SimExp() ("," SimExp())*
}

void Literal(): {}
{
	StringLiteral() | CharLiteral() | IntLiteral() | FloatLiteral()
}

void StringLiteral() #Literal :
{
	Token t;
}
{
	t = <STRING_LITERAL>
	{	
		jjtThis.setLitType("String");
		jjtThis.setLitValue(t.image);
	}
}

void CharLiteral() #Literal :
{
	Token t;
}
{
	t = <CHARACTER_LITERAL>
	{	
		jjtThis.setLitValue(t.image);
		jjtThis.setLitType("Character");
	}
}

void IntLiteral() #Literal :
{
	Token t;
}
{
	t = <INTEGER_LITERAL>
	{	
		jjtThis.setLitValue(t.image);
		jjtThis.setLitType("Integer");
	}
}

void FloatLiteral() #Literal :
{
	Token t;
}
{
	t = <FLOATING_POINT_LITERAL>
	{	
		jjtThis.setLitValue(t.image);
		jjtThis.setLitType("Float");
	}
}

void Identifier() #Identifier :
{
	Token t;
}
{
	t = <IDENTIFIER>
	{
		jjtThis.setIdentifier(t.image);
	}
}

void Type() #Type :
{
	Token t;
}
{
	/*t = <FILE>
	| t = "<" Identifier() ">"
	| t = <CLASS>
	| t = <METHOD>
	| t = <FIELD>
	| t = <STRING>
	| t = <BOOL>
	*/
	t = <TYPES>
	{
		jjtThis.setType(t.image);
	}
}

void Types(): {}
{
	<FILE> #File
	| "<" Identifier() ">"
	| <CLASS> #Class
	| <METHOD> #Method
	| <CONSTRUCTOR> #Constructor
	| <FIELD> #Field
	| <STRING> #String
	| <BOOL> #Bool
}